<?php
/**
 * Message
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatsApp API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Message Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Message implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => '\OpenAPI\Client\Model\MessageType',
        'subtype' => 'string',
        'chat_id' => 'string',
        'chat_name' => 'string',
        'from' => 'string',
        'from_me' => 'bool',
        'from_name' => 'string',
        'source' => '\OpenAPI\Client\Model\MessageSource',
        'timestamp' => 'float',
        'device_id' => 'float',
        'status' => '\OpenAPI\Client\Model\StatusEnum',
        'text' => '\OpenAPI\Client\Model\MessageContentText',
        'image' => '\OpenAPI\Client\Model\MessageContentImage',
        'video' => '\OpenAPI\Client\Model\MessageContentVideo',
        'short' => '\OpenAPI\Client\Model\MessageContentVideo',
        'gif' => '\OpenAPI\Client\Model\MessageContentVideo',
        'audio' => '\OpenAPI\Client\Model\MessageContentAudio',
        'voice' => '\OpenAPI\Client\Model\MessageContentAudio',
        'document' => '\OpenAPI\Client\Model\MessageContentDocument',
        'link_preview' => '\OpenAPI\Client\Model\MessageContentLinkPreview',
        'sticker' => '\OpenAPI\Client\Model\MessageContentSticker',
        'location' => '\OpenAPI\Client\Model\MessageContentLocation',
        'live_location' => '\OpenAPI\Client\Model\MessageContentLiveLocation',
        'contact' => '\OpenAPI\Client\Model\MessageContentContact',
        'contact_list' => '\OpenAPI\Client\Model\MessageContentContacts',
        'interactive' => '\OpenAPI\Client\Model\MessageContentInteractive',
        'poll' => '\OpenAPI\Client\Model\MessageContentPoll',
        'hsm' => '\OpenAPI\Client\Model\MessageContentHSM',
        'system' => '\OpenAPI\Client\Model\MessageContentSystem',
        'order' => '\OpenAPI\Client\Model\MessageContentOrder',
        'group_invite' => '\OpenAPI\Client\Model\MessageContentLinkPreview',
        'admin_invite' => '\OpenAPI\Client\Model\MessageContentNewsletterAdminInvite',
        'product' => '\OpenAPI\Client\Model\MessageContentProduct',
        'catalog' => '\OpenAPI\Client\Model\MessageContentLinkPreview',
        'product_items' => '\OpenAPI\Client\Model\MessageContentProductItems',
        'action' => '\OpenAPI\Client\Model\MessageAction',
        'context' => '\OpenAPI\Client\Model\MessageContext',
        'reactions' => '\OpenAPI\Client\Model\MessageReaction[]',
        'labels' => '\OpenAPI\Client\Model\Label[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'subtype' => null,
        'chat_id' => null,
        'chat_name' => null,
        'from' => null,
        'from_me' => null,
        'from_name' => null,
        'source' => null,
        'timestamp' => null,
        'device_id' => null,
        'status' => null,
        'text' => null,
        'image' => null,
        'video' => null,
        'short' => null,
        'gif' => null,
        'audio' => null,
        'voice' => null,
        'document' => null,
        'link_preview' => null,
        'sticker' => null,
        'location' => null,
        'live_location' => null,
        'contact' => null,
        'contact_list' => null,
        'interactive' => null,
        'poll' => null,
        'hsm' => null,
        'system' => null,
        'order' => null,
        'group_invite' => null,
        'admin_invite' => null,
        'product' => null,
        'catalog' => null,
        'product_items' => null,
        'action' => null,
        'context' => null,
        'reactions' => null,
        'labels' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'subtype' => false,
        'chat_id' => false,
        'chat_name' => false,
        'from' => false,
        'from_me' => false,
        'from_name' => false,
        'source' => false,
        'timestamp' => false,
        'device_id' => false,
        'status' => false,
        'text' => false,
        'image' => false,
        'video' => false,
        'short' => false,
        'gif' => false,
        'audio' => false,
        'voice' => false,
        'document' => false,
        'link_preview' => false,
        'sticker' => false,
        'location' => false,
        'live_location' => false,
        'contact' => false,
        'contact_list' => false,
        'interactive' => false,
        'poll' => false,
        'hsm' => false,
        'system' => false,
        'order' => false,
        'group_invite' => false,
        'admin_invite' => false,
        'product' => false,
        'catalog' => false,
        'product_items' => false,
        'action' => false,
        'context' => false,
        'reactions' => false,
        'labels' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'subtype' => 'subtype',
        'chat_id' => 'chat_id',
        'chat_name' => 'chat_name',
        'from' => 'from',
        'from_me' => 'from_me',
        'from_name' => 'from_name',
        'source' => 'source',
        'timestamp' => 'timestamp',
        'device_id' => 'device_id',
        'status' => 'status',
        'text' => 'text',
        'image' => 'image',
        'video' => 'video',
        'short' => 'short',
        'gif' => 'gif',
        'audio' => 'audio',
        'voice' => 'voice',
        'document' => 'document',
        'link_preview' => 'link_preview',
        'sticker' => 'sticker',
        'location' => 'location',
        'live_location' => 'live_location',
        'contact' => 'contact',
        'contact_list' => 'contact_list',
        'interactive' => 'interactive',
        'poll' => 'poll',
        'hsm' => 'hsm',
        'system' => 'system',
        'order' => 'order',
        'group_invite' => 'group_invite',
        'admin_invite' => 'admin_invite',
        'product' => 'product',
        'catalog' => 'catalog',
        'product_items' => 'product_items',
        'action' => 'action',
        'context' => 'context',
        'reactions' => 'reactions',
        'labels' => 'labels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'chat_id' => 'setChatId',
        'chat_name' => 'setChatName',
        'from' => 'setFrom',
        'from_me' => 'setFromMe',
        'from_name' => 'setFromName',
        'source' => 'setSource',
        'timestamp' => 'setTimestamp',
        'device_id' => 'setDeviceId',
        'status' => 'setStatus',
        'text' => 'setText',
        'image' => 'setImage',
        'video' => 'setVideo',
        'short' => 'setShort',
        'gif' => 'setGif',
        'audio' => 'setAudio',
        'voice' => 'setVoice',
        'document' => 'setDocument',
        'link_preview' => 'setLinkPreview',
        'sticker' => 'setSticker',
        'location' => 'setLocation',
        'live_location' => 'setLiveLocation',
        'contact' => 'setContact',
        'contact_list' => 'setContactList',
        'interactive' => 'setInteractive',
        'poll' => 'setPoll',
        'hsm' => 'setHsm',
        'system' => 'setSystem',
        'order' => 'setOrder',
        'group_invite' => 'setGroupInvite',
        'admin_invite' => 'setAdminInvite',
        'product' => 'setProduct',
        'catalog' => 'setCatalog',
        'product_items' => 'setProductItems',
        'action' => 'setAction',
        'context' => 'setContext',
        'reactions' => 'setReactions',
        'labels' => 'setLabels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'chat_id' => 'getChatId',
        'chat_name' => 'getChatName',
        'from' => 'getFrom',
        'from_me' => 'getFromMe',
        'from_name' => 'getFromName',
        'source' => 'getSource',
        'timestamp' => 'getTimestamp',
        'device_id' => 'getDeviceId',
        'status' => 'getStatus',
        'text' => 'getText',
        'image' => 'getImage',
        'video' => 'getVideo',
        'short' => 'getShort',
        'gif' => 'getGif',
        'audio' => 'getAudio',
        'voice' => 'getVoice',
        'document' => 'getDocument',
        'link_preview' => 'getLinkPreview',
        'sticker' => 'getSticker',
        'location' => 'getLocation',
        'live_location' => 'getLiveLocation',
        'contact' => 'getContact',
        'contact_list' => 'getContactList',
        'interactive' => 'getInteractive',
        'poll' => 'getPoll',
        'hsm' => 'getHsm',
        'system' => 'getSystem',
        'order' => 'getOrder',
        'group_invite' => 'getGroupInvite',
        'admin_invite' => 'getAdminInvite',
        'product' => 'getProduct',
        'catalog' => 'getCatalog',
        'product_items' => 'getProductItems',
        'action' => 'getAction',
        'context' => 'getContext',
        'reactions' => 'getReactions',
        'labels' => 'getLabels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('chat_id', $data ?? [], null);
        $this->setIfExists('chat_name', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('from_me', $data ?? [], null);
        $this->setIfExists('from_name', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('short', $data ?? [], null);
        $this->setIfExists('gif', $data ?? [], null);
        $this->setIfExists('audio', $data ?? [], null);
        $this->setIfExists('voice', $data ?? [], null);
        $this->setIfExists('document', $data ?? [], null);
        $this->setIfExists('link_preview', $data ?? [], null);
        $this->setIfExists('sticker', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('live_location', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('contact_list', $data ?? [], null);
        $this->setIfExists('interactive', $data ?? [], null);
        $this->setIfExists('poll', $data ?? [], null);
        $this->setIfExists('hsm', $data ?? [], null);
        $this->setIfExists('system', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('group_invite', $data ?? [], null);
        $this->setIfExists('admin_invite', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('catalog', $data ?? [], null);
        $this->setIfExists('product_items', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('reactions', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['chat_id'] === null) {
            $invalidProperties[] = "'chat_id' can't be null";
        }
        if ($this->container['from_me'] === null) {
            $invalidProperties[] = "'from_me' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Message ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\MessageType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\MessageType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype Message subtype
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets chat_id
     *
     * @return string
     */
    public function getChatId()
    {
        return $this->container['chat_id'];
    }

    /**
     * Sets chat_id
     *
     * @param string $chat_id Chat ID
     *
     * @return self
     */
    public function setChatId($chat_id)
    {
        if (is_null($chat_id)) {
            throw new \InvalidArgumentException('non-nullable chat_id cannot be null');
        }
        $this->container['chat_id'] = $chat_id;

        return $this;
    }

    /**
     * Gets chat_name
     *
     * @return string|null
     */
    public function getChatName()
    {
        return $this->container['chat_name'];
    }

    /**
     * Sets chat_name
     *
     * @param string|null $chat_name Chat name
     *
     * @return self
     */
    public function setChatName($chat_name)
    {
        if (is_null($chat_name)) {
            throw new \InvalidArgumentException('non-nullable chat_name cannot be null');
        }
        $this->container['chat_name'] = $chat_name;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from WhatsApp ID of the sender
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets from_me
     *
     * @return bool
     */
    public function getFromMe()
    {
        return $this->container['from_me'];
    }

    /**
     * Sets from_me
     *
     * @param bool $from_me Is message from me
     *
     * @return self
     */
    public function setFromMe($from_me)
    {
        if (is_null($from_me)) {
            throw new \InvalidArgumentException('non-nullable from_me cannot be null');
        }
        $this->container['from_me'] = $from_me;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string|null
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string|null $from_name Pushname of the sender
     *
     * @return self
     */
    public function setFromName($from_name)
    {
        if (is_null($from_name)) {
            throw new \InvalidArgumentException('non-nullable from_name cannot be null');
        }
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \OpenAPI\Client\Model\MessageSource|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \OpenAPI\Client\Model\MessageSource|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return float
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param float $timestamp Message timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return float|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param float|null $device_id Device ID, if the message was not sent through the app
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\StatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\StatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \OpenAPI\Client\Model\MessageContentText|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \OpenAPI\Client\Model\MessageContentText|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\MessageContentImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\MessageContentImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \OpenAPI\Client\Model\MessageContentVideo|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \OpenAPI\Client\Model\MessageContentVideo|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            throw new \InvalidArgumentException('non-nullable video cannot be null');
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets short
     *
     * @return \OpenAPI\Client\Model\MessageContentVideo|null
     */
    public function getShort()
    {
        return $this->container['short'];
    }

    /**
     * Sets short
     *
     * @param \OpenAPI\Client\Model\MessageContentVideo|null $short short
     *
     * @return self
     */
    public function setShort($short)
    {
        if (is_null($short)) {
            throw new \InvalidArgumentException('non-nullable short cannot be null');
        }
        $this->container['short'] = $short;

        return $this;
    }

    /**
     * Gets gif
     *
     * @return \OpenAPI\Client\Model\MessageContentVideo|null
     */
    public function getGif()
    {
        return $this->container['gif'];
    }

    /**
     * Sets gif
     *
     * @param \OpenAPI\Client\Model\MessageContentVideo|null $gif gif
     *
     * @return self
     */
    public function setGif($gif)
    {
        if (is_null($gif)) {
            throw new \InvalidArgumentException('non-nullable gif cannot be null');
        }
        $this->container['gif'] = $gif;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return \OpenAPI\Client\Model\MessageContentAudio|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param \OpenAPI\Client\Model\MessageContentAudio|null $audio audio
     *
     * @return self
     */
    public function setAudio($audio)
    {
        if (is_null($audio)) {
            throw new \InvalidArgumentException('non-nullable audio cannot be null');
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return \OpenAPI\Client\Model\MessageContentAudio|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param \OpenAPI\Client\Model\MessageContentAudio|null $voice voice
     *
     * @return self
     */
    public function setVoice($voice)
    {
        if (is_null($voice)) {
            throw new \InvalidArgumentException('non-nullable voice cannot be null');
        }
        $this->container['voice'] = $voice;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \OpenAPI\Client\Model\MessageContentDocument|null
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \OpenAPI\Client\Model\MessageContentDocument|null $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        if (is_null($document)) {
            throw new \InvalidArgumentException('non-nullable document cannot be null');
        }
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets link_preview
     *
     * @return \OpenAPI\Client\Model\MessageContentLinkPreview|null
     */
    public function getLinkPreview()
    {
        return $this->container['link_preview'];
    }

    /**
     * Sets link_preview
     *
     * @param \OpenAPI\Client\Model\MessageContentLinkPreview|null $link_preview link_preview
     *
     * @return self
     */
    public function setLinkPreview($link_preview)
    {
        if (is_null($link_preview)) {
            throw new \InvalidArgumentException('non-nullable link_preview cannot be null');
        }
        $this->container['link_preview'] = $link_preview;

        return $this;
    }

    /**
     * Gets sticker
     *
     * @return \OpenAPI\Client\Model\MessageContentSticker|null
     */
    public function getSticker()
    {
        return $this->container['sticker'];
    }

    /**
     * Sets sticker
     *
     * @param \OpenAPI\Client\Model\MessageContentSticker|null $sticker sticker
     *
     * @return self
     */
    public function setSticker($sticker)
    {
        if (is_null($sticker)) {
            throw new \InvalidArgumentException('non-nullable sticker cannot be null');
        }
        $this->container['sticker'] = $sticker;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\MessageContentLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\MessageContentLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets live_location
     *
     * @return \OpenAPI\Client\Model\MessageContentLiveLocation|null
     */
    public function getLiveLocation()
    {
        return $this->container['live_location'];
    }

    /**
     * Sets live_location
     *
     * @param \OpenAPI\Client\Model\MessageContentLiveLocation|null $live_location live_location
     *
     * @return self
     */
    public function setLiveLocation($live_location)
    {
        if (is_null($live_location)) {
            throw new \InvalidArgumentException('non-nullable live_location cannot be null');
        }
        $this->container['live_location'] = $live_location;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \OpenAPI\Client\Model\MessageContentContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \OpenAPI\Client\Model\MessageContentContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets contact_list
     *
     * @return \OpenAPI\Client\Model\MessageContentContacts|null
     */
    public function getContactList()
    {
        return $this->container['contact_list'];
    }

    /**
     * Sets contact_list
     *
     * @param \OpenAPI\Client\Model\MessageContentContacts|null $contact_list contact_list
     *
     * @return self
     */
    public function setContactList($contact_list)
    {
        if (is_null($contact_list)) {
            throw new \InvalidArgumentException('non-nullable contact_list cannot be null');
        }
        $this->container['contact_list'] = $contact_list;

        return $this;
    }

    /**
     * Gets interactive
     *
     * @return \OpenAPI\Client\Model\MessageContentInteractive|null
     */
    public function getInteractive()
    {
        return $this->container['interactive'];
    }

    /**
     * Sets interactive
     *
     * @param \OpenAPI\Client\Model\MessageContentInteractive|null $interactive interactive
     *
     * @return self
     */
    public function setInteractive($interactive)
    {
        if (is_null($interactive)) {
            throw new \InvalidArgumentException('non-nullable interactive cannot be null');
        }
        $this->container['interactive'] = $interactive;

        return $this;
    }

    /**
     * Gets poll
     *
     * @return \OpenAPI\Client\Model\MessageContentPoll|null
     */
    public function getPoll()
    {
        return $this->container['poll'];
    }

    /**
     * Sets poll
     *
     * @param \OpenAPI\Client\Model\MessageContentPoll|null $poll poll
     *
     * @return self
     */
    public function setPoll($poll)
    {
        if (is_null($poll)) {
            throw new \InvalidArgumentException('non-nullable poll cannot be null');
        }
        $this->container['poll'] = $poll;

        return $this;
    }

    /**
     * Gets hsm
     *
     * @return \OpenAPI\Client\Model\MessageContentHSM|null
     */
    public function getHsm()
    {
        return $this->container['hsm'];
    }

    /**
     * Sets hsm
     *
     * @param \OpenAPI\Client\Model\MessageContentHSM|null $hsm hsm
     *
     * @return self
     */
    public function setHsm($hsm)
    {
        if (is_null($hsm)) {
            throw new \InvalidArgumentException('non-nullable hsm cannot be null');
        }
        $this->container['hsm'] = $hsm;

        return $this;
    }

    /**
     * Gets system
     *
     * @return \OpenAPI\Client\Model\MessageContentSystem|null
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param \OpenAPI\Client\Model\MessageContentSystem|null $system system
     *
     * @return self
     */
    public function setSystem($system)
    {
        if (is_null($system)) {
            throw new \InvalidArgumentException('non-nullable system cannot be null');
        }
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Model\MessageContentOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Model\MessageContentOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets group_invite
     *
     * @return \OpenAPI\Client\Model\MessageContentLinkPreview|null
     */
    public function getGroupInvite()
    {
        return $this->container['group_invite'];
    }

    /**
     * Sets group_invite
     *
     * @param \OpenAPI\Client\Model\MessageContentLinkPreview|null $group_invite group_invite
     *
     * @return self
     */
    public function setGroupInvite($group_invite)
    {
        if (is_null($group_invite)) {
            throw new \InvalidArgumentException('non-nullable group_invite cannot be null');
        }
        $this->container['group_invite'] = $group_invite;

        return $this;
    }

    /**
     * Gets admin_invite
     *
     * @return \OpenAPI\Client\Model\MessageContentNewsletterAdminInvite|null
     */
    public function getAdminInvite()
    {
        return $this->container['admin_invite'];
    }

    /**
     * Sets admin_invite
     *
     * @param \OpenAPI\Client\Model\MessageContentNewsletterAdminInvite|null $admin_invite admin_invite
     *
     * @return self
     */
    public function setAdminInvite($admin_invite)
    {
        if (is_null($admin_invite)) {
            throw new \InvalidArgumentException('non-nullable admin_invite cannot be null');
        }
        $this->container['admin_invite'] = $admin_invite;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Model\MessageContentProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Model\MessageContentProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets catalog
     *
     * @return \OpenAPI\Client\Model\MessageContentLinkPreview|null
     */
    public function getCatalog()
    {
        return $this->container['catalog'];
    }

    /**
     * Sets catalog
     *
     * @param \OpenAPI\Client\Model\MessageContentLinkPreview|null $catalog catalog
     *
     * @return self
     */
    public function setCatalog($catalog)
    {
        if (is_null($catalog)) {
            throw new \InvalidArgumentException('non-nullable catalog cannot be null');
        }
        $this->container['catalog'] = $catalog;

        return $this;
    }

    /**
     * Gets product_items
     *
     * @return \OpenAPI\Client\Model\MessageContentProductItems|null
     */
    public function getProductItems()
    {
        return $this->container['product_items'];
    }

    /**
     * Sets product_items
     *
     * @param \OpenAPI\Client\Model\MessageContentProductItems|null $product_items product_items
     *
     * @return self
     */
    public function setProductItems($product_items)
    {
        if (is_null($product_items)) {
            throw new \InvalidArgumentException('non-nullable product_items cannot be null');
        }
        $this->container['product_items'] = $product_items;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \OpenAPI\Client\Model\MessageAction|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \OpenAPI\Client\Model\MessageAction|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \OpenAPI\Client\Model\MessageContext|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \OpenAPI\Client\Model\MessageContext|null $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        if (is_null($context)) {
            throw new \InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \OpenAPI\Client\Model\MessageReaction[]|null
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \OpenAPI\Client\Model\MessageReaction[]|null $reactions Reactions for message
     *
     * @return self
     */
    public function setReactions($reactions)
    {
        if (is_null($reactions)) {
            throw new \InvalidArgumentException('non-nullable reactions cannot be null');
        }
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPI\Client\Model\Label[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPI\Client\Model\Label[]|null $labels Labels associated with message
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


